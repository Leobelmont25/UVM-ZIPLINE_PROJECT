`timescale 1ns/1ps
`include "uvm_macros.svh"
import uvm_pkg::*;

// ---------------------------------------------------
// Top-level testbench
// ---------------------------------------------------
module top_cfg_tb;

  // Clock & reset
  logic clk;
  logic rst_n;

  // Interfaces
  apb_if   apb_if_i(.clk(clk), .rst_n(rst_n));
  axi_s_if ib_if  (.clk(clk), .rst_n(rst_n));

  // DUT
  cr_cceip_64 dut (
    .clk         (clk),
    .rst_n       (rst_n),

    // ---- APB ----
    .apb_paddr   (apb_if_i.paddr),
    .apb_psel    (apb_if_i.psel),
    .apb_penable (apb_if_i.penable),
    .apb_pwrite  (apb_if_i.pwrite),
    .apb_pwdata  (apb_if_i.pwdata),
    .apb_prdata  (apb_if_i.prdata),
    .apb_pready  (apb_if_i.pready),
    .apb_pslverr (apb_if_i.pslverr),

    // ---- IB ----
    .ib_tvalid   (ib_if.tvalid),
    .ib_tready   (ib_if.tready),
    .ib_tlast    (ib_if.tlast),
    .ib_tid      (ib_if.tid),
    .ib_tstrb    (ib_if.tstrb),
    .ib_tuser    (ib_if.tuser),
    .ib_tdata    (ib_if.tdata),

    // ---- OB ----
    .ob_tvalid   (),
    .ob_tready   (ib_if.tready),
    .ob_tlast    (),
    .ob_tid      (),
    .ob_tstrb    (),
    .ob_tuser    (),
    .ob_tdata    (),

    .cceip_int   (),
    .cceip_idle  ()
  );

  // Clock generator
  initial begin
    clk = 0;
    forever #5 clk = ~clk;
  end

  // Reset
  initial begin
    rst_n = 0;
    #100;
    rst_n = 1;
  end

  // ---------------------------------------------------
  // UVM config_db connections
  // ---------------------------------------------------
  initial begin
    // APB
    uvm_config_db#(virtual apb_if.mst)::set(null, "env.apb",          "vif_mst", apb_if_i);
    uvm_config_db#(virtual apb_if.mst)::set(null, "env.apb.m_driver", "vif",     apb_if_i);
    uvm_config_db#(virtual apb_if    )::set(null, "env.apb",          "vif",     apb_if_i);
    // >>> ADI????O: monitor espera 'virtual apb_if' sem modport
    uvm_config_db#(virtual apb_if    )::set(null, "env.apb",          "vif_mon", apb_if_i);

    // IB (AXI-Stream)
    uvm_config_db#(virtual axi_s_if.mst)::set(null, "env.ib",          "vif_mst", ib_if);
    uvm_config_db#(virtual axi_s_if.mst)::set(null, "env.ib.m_driver", "vif",     ib_if);
    uvm_config_db#(virtual axi_s_if    )::set(null, "env.ib",          "vif",     ib_if);

    // redund??ncias p/ path absoluto (caso agent espere "uvm_test_top.env...")
    uvm_config_db#(virtual apb_if.mst)::set(null, "uvm_test_top.env.apb",          "vif_mst", apb_if_i);
    uvm_config_db#(virtual apb_if.mst)::set(null, "uvm_test_top.env.apb.m_driver", "vif",     apb_if_i);
    // >>> ADI????O: mesmo para o caminho absoluto
    uvm_config_db#(virtual apb_if    )::set(null, "uvm_test_top.env.apb",          "vif_mon", apb_if_i);

    uvm_config_db#(virtual axi_s_if.mst)::set(null, "uvm_test_top.env.ib",          "vif_mst", ib_if);
    uvm_config_db#(virtual axi_s_if.mst)::set(null, "uvm_test_top.env.ib.m_driver", "vif",     ib_if);

    // Run test
    run_test("cfg_test");
  end

endmodule
