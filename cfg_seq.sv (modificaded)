`include "uvm_macros.svh"
import uvm_pkg::*;

class cfg_seq extends uvm_sequence #(apb_seq_item);
  `uvm_object_utils(cfg_seq)

  string testname;
  int    max_fatals = 10;

  function new(string name="cfg_seq"); super.new(name); endfunction

  task body();
    // ------------------ Declarações ------------------
    string file_name, vector, op;
    int    fd, rc, str_get;
    bit [31:0] address, data;
    int    error_cntr;
    apb_seq_item tr;

    // plusargs (sem sufixo)
    string        en_addr_s, en_val_s;
    int unsigned  en_addr,   en_val;
    // plusargs indexados 0..5
    string        en_addr_sn[6], en_val_sn[6];
    int unsigned  en_addr_n [6], en_val_n [6];
    int i;

    // ENABLE_FILE
    string enable_file;
    int    efd;
    string ln, tag;
    bit [31:0] a, v;
    int    cnt;

    // ------------------ L??gica principal ------------------
    error_cntr = 0;
    cnt = 0;

    if (testname == "") begin
      `uvm_warning("CFGSEQ","testname vazio; usando 'unknown'")
      testname = "unknown";
    end

    // 1) Carrega ../tests/<testname>.config
    file_name = $psprintf("../tests/%s.config", testname);
    fd = $fopen(file_name, "r");
    if (fd == 0) begin
      `uvm_info("CFGSEQ", $sformatf("Arquivo %s nao encontrado; sequencia retorna.", file_name), UVM_LOW)
      return;
    end
    `uvm_info("CFGSEQ", $sformatf("Abrindo config: %s", file_name), UVM_MEDIUM)

    while (!$feof(fd)) begin
      rc = $fgets(vector, fd);
      if (rc == 0) break;
      if (vector.len() == 0 || vector[0] == "#") continue;

      str_get = $sscanf(vector, "%s 0x%h 0x%h", op, address, data);

      if (str_get == 3 && (op == "r" || op == "R" || op == "w" || op == "W")) begin
        tr = apb_seq_item::type_id::create("tr");

        if (op.tolower() == "w") begin
          tr.op   = apb_seq_item::APB_WRITE;
          tr.addr = address;
          tr.data = data;
          start_item(tr); finish_item(tr);
          if (tr.resp_err) begin
            `uvm_error("CFGSEQ", $sformatf("WRITE PSLVERR/timeout @0x%h", address))
            if (++error_cntr > max_fatals) `uvm_fatal("CFGSEQ","Muitos erros em WRITE")
          end
        end
        else begin
          tr.op   = apb_seq_item::APB_READ;
          tr.addr = address;
          tr.data = data; // esperado
          start_item(tr); finish_item(tr);
          if (tr.resp_err) `uvm_fatal("CFGSEQ", $sformatf("READ PSLVERR/timeout @0x%h", address))
          if (tr.rdata !== tr.data) begin
            `uvm_error("CFGSEQ", $sformatf("READ mismatch @0x%h got=0x%0h exp=0x%0h", address, tr.rdata, tr.data))
            if (++error_cntr > max_fatals) `uvm_fatal("CFGSEQ","Muitos erros em READ")
          end
        end
      end
      else if (op != "#") begin
        `uvm_fatal("CFGSEQ", $sformatf("Linha invalida: %s", vector))
      end
    end

    $fclose(fd);

    if (error_cntr) `uvm_error("CFGSEQ", $sformatf("Config terminou com %0d erros", error_cntr))
    else            `uvm_info ("CFGSEQ", "Config OK (sem erros)", UVM_LOW)

    // 2) Enable sem sufixo
    if ($value$plusargs("ENABLE_ADDR=%s", en_addr_s) &&
        $value$plusargs("ENABLE_VAL=%s",  en_val_s)) begin
      void'($sscanf(en_addr_s, "%h", en_addr));
      void'($sscanf(en_val_s,  "%h", en_val));
      `uvm_info("CFGSEQ",
                $sformatf("Enable via APB: addr=0x%08h val=0x%08h", en_addr, en_val),
                UVM_MEDIUM)
      tr = apb_seq_item::type_id::create("tr_enable");
      tr.op   = apb_seq_item::APB_WRITE;
      tr.addr = en_addr;
      tr.data = en_val;
      start_item(tr); finish_item(tr);
      if (tr.resp_err) `uvm_fatal("CFGSEQ", $sformatf("ENABLE write PSLVERR @0x%08h", en_addr))
    end

    // 3) Enables indexados 0..5
    for (i = 0; i < 6; i++) begin
      string an, vn;
      an = $sformatf("ENABLE_ADDR%0d=%%s", i);
      vn = $sformatf("ENABLE_VAL%0d=%%s",  i);
      if ($value$plusargs(an, en_addr_sn[i]) &&
          $value$plusargs(vn, en_val_sn[i])) begin
        void'($sscanf(en_addr_sn[i], "%h", en_addr_n[i]));
        void'($sscanf(en_val_sn[i],  "%h", en_val_n[i]));
        `uvm_info("CFGSEQ",
                  $sformatf("Enable[%0d] via APB: addr=0x%08h val=0x%08h",
                            i, en_addr_n[i], en_val_n[i]),
                  UVM_MEDIUM)
        tr = apb_seq_item::type_id::create($sformatf("tr_enable_%0d", i));
        tr.op   = apb_seq_item::APB_WRITE;
        tr.addr = en_addr_n[i];
        tr.data = en_val_n[i];
        start_item(tr); finish_item(tr);
        if (tr.resp_err)
          `uvm_fatal("CFGSEQ", $sformatf("ENABLE[%0d] PSLVERR @0x%08h", i, en_addr_n[i]))
      end
    end

    // 4) Habilita????o em massa via arquivo anotado (+ENABLE_FILE=<path>)
    if ($value$plusargs("ENABLE_FILE=%s", enable_file)) begin
      efd = $fopen(enable_file, "r");
      if (efd == 0) begin
        `uvm_fatal("CFGSEQ", $sformatf("Nao abriu ENABLE_FILE: %s", enable_file))
      end
      else begin
        `uvm_info("CFGSEQ", $sformatf("Aplicando enables de %s", enable_file), UVM_LOW)
        cnt = 0;
        while (!$feof(efd)) begin
          void'($fgets(ln, efd));
          // aceita linhas do tipo:  w 0xADDR 0xVAL   (ignora linhas que n??o casam)
          if ($sscanf(ln, "%s 0x%h 0x%h", tag, a, v) == 3) begin
            if (tag == "w" || tag == "W") begin
              tr = apb_seq_item::type_id::create($sformatf("tr_en_file_%0d", cnt));
              tr.op   = apb_seq_item::APB_WRITE;
              tr.addr = a;
              tr.data = v;
              start_item(tr); finish_item(tr);
              if (tr.resp_err)
                `uvm_fatal("CFGSEQ", $sformatf("ENABLE(FILE) PSLVERR @0x%08h", a))
              cnt++;
              `uvm_info("CFGSEQ",
                        $sformatf("Enable(FILE) via APB: addr=0x%08h val=0x%08h", a, v),
                        UVM_LOW)
            end
          end
        end
        $fclose(efd);
        `uvm_info("CFGSEQ", $sformatf("ENABLE(FILE): %0d writes aplicados", cnt), UVM_LOW)
      end
    end

  endtask
endclass
